{"ast":null,"code":"import axios from 'axios';\nconst ip = \"192.168.1.203\";\nexport default {\n  login: user => {\n    return fetch('/user/login', {\n      method: \"post\",\n      body: JSON.stringify(user),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status !== 401) return res.json().then(data => data);else return {\n        isAuthenticated: false,\n        user: {\n          username: \"\",\n          role: \"\",\n          dni: \"\",\n          mail: \"\",\n          companyID: \"\"\n        },\n        error: true\n      };\n    });\n  },\n  register: async user => {\n    return await axios.put('http://' + ip + ':5000/user/register', user).then(res => res);\n  },\n  registerNew: async user => {\n    return await axios.post('http://' + ip + ':5000/user/registerNew', user).then(res => res);\n  },\n  logout: () => {\n    return fetch('/user/logout').then(res => res.json()).then(data => data);\n  },\n  getData: async companyid => {\n    //cambiar con la ip de tu casa\n    return await axios.get('http://' + ip + ':5000/user/users/' + companyid).then(res => res);\n  },\n  removeUser: async id => {\n    //cambiar con la ip de tu casa\n    return await axios.get('http://' + ip + ':5000/user/delete/' + id).then(res => res);\n  },\n  isAuthenticated: () => {\n    return fetch('/user/authenticated').then(res => {\n      if (res.status !== 401) return res.json().then(data => data);else return {\n        isAuthenticated: false,\n        user: {\n          username: \"\",\n          role: \"\",\n          dni: \"\",\n          mail: \"\",\n          companyid: \"\"\n        },\n        error: true\n      };\n    });\n  },\n  postPython: async link => {\n    //cambiar con la ip de tu casa\n    return await axios.post('http://' + ip + ':5000/python', link).then(res => res);\n  }\n};","map":{"version":3,"sources":["D:/GitHub/proyecto-21-junio/main/client/src/Services/AuthService.js"],"names":["axios","ip","login","user","fetch","method","body","JSON","stringify","headers","then","res","status","json","data","isAuthenticated","username","role","dni","mail","companyID","error","register","put","registerNew","post","logout","getData","companyid","get","removeUser","id","postPython","link"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nconst ip = \"192.168.1.203\"\r\n\r\nexport default {\r\n    login : user =>{\r\n        return fetch('/user/login',{\r\n            method : \"post\",\r\n            body : JSON.stringify(user),\r\n            headers : {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }).then(res => {\r\n            if(res.status !== 401)\r\n                return res.json().then(data => data);\r\n            else\r\n                return { isAuthenticated : false, user : {username : \"\",role : \"\", dni:\"\",mail:\"\",companyID:\"\"},error:true};\r\n        })\r\n    },\r\n    register : async user => {\r\n        \r\n        return await axios.put('http://'+ ip + ':5000/user/register',user)\r\n        .then(res => res)\r\n    },\r\n    registerNew :async user =>{\r\n        return await axios.post('http://'+ ip + ':5000/user/registerNew',user)\r\n        .then(res => res)\r\n    },\r\n    logout : ()=>{\r\n        return fetch('/user/logout')\r\n                .then(res => res.json())\r\n                .then(data => data);\r\n    },\r\n    getData : async (companyid)=>{\r\n        //cambiar con la ip de tu casa\r\n        return await axios.get('http://'+ ip + ':5000/user/users/'+ companyid)\r\n        .then(res => res)\r\n        \r\n    },\r\n    removeUser : async (id)=>{\r\n        //cambiar con la ip de tu casa\r\n        return await axios.get('http://'+ ip + ':5000/user/delete/'+ id)\r\n        .then(res => res)\r\n        \r\n    },\r\n    isAuthenticated : ()=>{\r\n        return fetch('/user/authenticated')\r\n                .then(res=>{\r\n                    if(res.status !== 401)\r\n                        return res.json().then(data => data);\r\n                    else\r\n                        return { isAuthenticated : false, user : {username : \"\",role : \"\",dni:\"\",mail:\"\",companyid:\"\"},error:true};\r\n                });\r\n    },  postPython: async (link) =>{\r\n        //cambiar con la ip de tu casa\r\n        return await axios.post('http://'+ ip + ':5000/python',link)\r\n        .then(res => res)\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}